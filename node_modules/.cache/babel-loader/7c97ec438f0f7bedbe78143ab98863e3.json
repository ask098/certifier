{"remainingRequest":"/home/camilo/Curso_block/practica1/Certifier/node_modules/babel-loader/lib/index.js!/home/camilo/Curso_block/practica1/Certifier/src/store/modules/course.js","dependencies":[{"path":"/home/camilo/Curso_block/practica1/Certifier/src/store/modules/course.js","mtime":1542847352343},{"path":"/home/camilo/Curso_block/practica1/Certifier/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/camilo/Curso_block/practica1/Certifier/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/home/camilo/Curso_block/practica1/Certifier/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _actions, _mutations;\n\nimport * as constants from '@/store/constants';\nimport CourseContract from '@/contracts/Certifier.json';\nvar state = {\n  provider: !!(window.web3 && window.web3.currentProvider),\n  isOwner: false,\n  contract: null,\n  coinbase: null\n};\nvar actions = (_actions = {}, _defineProperty(_actions, constants.COURSE_INIT, function (_ref) {\n  var commit = _ref.commit;\n  var abi = CourseContract.abi;\n  var contractAddress = '0xf9bbc23c9a8ac9517f2b24a6c17013acc5c6c9c5';\n  var contract = web3.eth.contract(abi).at(contractAddress);\n  commit(constants.COURSE_SET_CONTRACT, contract);\n  web3.eth.getCoinbase(function (error, coinbase) {\n    if (error) console.error(error);\n    commit(constants.COURSE_SET_COINBASE, coinbase);\n    contract.isOwner({\n      from: coinbase\n    }, function (error, isOwner) {\n      if (error) console.error(error);\n      commit(constants.COURSE_SET_IS_OWNER, isOwner);\n    });\n  });\n}), _defineProperty(_actions, constants.COURSE_ADD_COURSE, function (_ref2, data) {\n  var state = _ref2.state;\n  var courseCode = data.courseCode,\n      courseName = data.courseName,\n      courseCost = data.courseCost,\n      courseDuration = data.courseDuration,\n      courseThreshold = data.courseThreshold,\n      codes = data.codes;\n  state.contract.addCourse(courseCode, courseName, courseCost, courseDuration, courseThreshold, codes, {\n    from: state.coinbase\n  }, function (error, result) {\n    if (error) console.error(error);\n    console.info(result);\n  });\n}), _actions);\nvar mutations = (_mutations = {}, _defineProperty(_mutations, constants.COURSE_SET_CONTRACT, function (state, contract) {\n  state.contract = contract;\n}), _defineProperty(_mutations, constants.COURSE_SET_COINBASE, function (state, coinbase) {\n  state.coinbase = coinbase;\n}), _defineProperty(_mutations, constants.COURSE_SET_IS_OWNER, function (state, isOwner) {\n  state.isOwner = isOwner;\n}), _mutations);\nvar getters = {};\nexport default {\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};",{"version":3,"sources":["/home/camilo/Curso_block/practica1/Certifier/src/store/modules/course.js"],"names":["constants","CourseContract","state","provider","window","web3","currentProvider","isOwner","contract","coinbase","actions","COURSE_INIT","commit","abi","contractAddress","eth","at","COURSE_SET_CONTRACT","getCoinbase","error","console","COURSE_SET_COINBASE","from","COURSE_SET_IS_OWNER","COURSE_ADD_COURSE","data","courseCode","courseName","courseCost","courseDuration","courseThreshold","codes","addCourse","result","info","mutations","getters"],"mappings":"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","sourcesContent":["import * as constants from '@/store/constants'\nimport CourseContract from '@/contracts/Certifier.json'\n\nconst state = {\n  provider: !!(window.web3 && window.web3.currentProvider),\n  isOwner: false,\n  contract: null,\n  coinbase: null\n}\n\nconst actions = {\n  [constants.COURSE_INIT]: ({commit}) => {\n    const abi = CourseContract.abi\n    const contractAddress = '0xf9bbc23c9a8ac9517f2b24a6c17013acc5c6c9c5'\n    const contract = web3.eth.contract(abi).at(contractAddress)\n    commit(constants.COURSE_SET_CONTRACT, contract)\n    web3.eth.getCoinbase((error, coinbase) => {\n      if (error) console.error(error)\n      commit(constants.COURSE_SET_COINBASE, coinbase)\n      contract.isOwner({from: coinbase}, (error, isOwner) => {\n        if (error) console.error(error)\n        commit(constants.COURSE_SET_IS_OWNER, isOwner)\n      })\n    })\n  },\n  [constants.COURSE_ADD_COURSE]: ({state}, data) => {\n    const {\n      courseCode,\n      courseName,\n      courseCost,\n      courseDuration,\n      courseThreshold,\n      codes\n    } = data\n    state.contract.addCourse(\n      courseCode,\n      courseName,\n      courseCost,\n      courseDuration,\n      courseThreshold,\n      codes,\n      {from: state.coinbase},\n      (error, result) => {\n        if(error) console.error(error)\n        console.info(result)\n      }\n    )\n  }\n}\n\nconst mutations = {\n  [constants.COURSE_SET_CONTRACT]: (state, contract) => {\n    state.contract = contract\n  },\n  [constants.COURSE_SET_COINBASE]: (state, coinbase) => {\n    state.coinbase = coinbase\n  },\n  [constants.COURSE_SET_IS_OWNER]: (state, isOwner) => {\n    state.isOwner = isOwner\n  }\n}\n\nconst getters = {}\n\nexport default {\n  state,\n  actions,\n  mutations,\n  getters\n}"]}]}